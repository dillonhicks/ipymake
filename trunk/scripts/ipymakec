#!/bin/env python
"""
:program:`ipymakec` -- The IPyMake Compiler Frontend Program
=============================================================

.. moduleauthor:: Dillon Hicks <hhicks@ittc.ku.edu>
"""

import optparse, sys, os
import ipymake.information as ipyminfo 
FILENAME = 0
ERRNO_NO_FILENAME = 1  
ERRNO_INFILE_SYNTAX = 2

########################################################
#
# All of the test modules will need the same options front
# end, so this can be imported where one would normally
# place the optparse template. 
#
#
if __name__ == '__main__':    
    # Define the set of permitted parameters, including the
    # command arguments.  The initialization method creates
    # the parser and defines the defaults. The parse()
    # method actually parses the arguments one the command
    # line. This was done so that the instance of the class
    # could be global and thus available to all
    # routines. and then parse the arguments to this call
    # according to the specification
    class Params_Set:
        USAGE = "usage: %prog [options] <filename>"
        VERSION = ipyminfo.__version__
        DESCRIPTION  = "IPyMake is an automatic software build tool extention for IPython."

        def __init__(self):
            # Create the argument parser and then tell it
            # about the set of legal arguments for this
            # command. The parse() method of this class
            # calls parse_args of the optparse module
            self.p = optparse.OptionParser(usage=self.USAGE)
    
            # Boring and totally standard verbose and
            # debugging options that should be common to
            # virtually any command
            #
            self.p.add_option("-d", action="store_const", const=1,        
                              dest="debug_level", 
                              help="Turn on diagnostic output at level 1")
            self.p.add_option("-D", action="store", type ="int",    
                              dest="debug_level", 
                              help="Turn on diagnostic output at level DEBUG_LEVEL")
            self.p.add_option("-v", action="store_const", const=1,        
                              dest="verbose_level", 
                              help="Turn on narrative output at level 1")
            self.p.add_option("-V", action="store", type ="int",    
                              dest="verbose_level", 
                              help="Turn on narrative output at level VERBOSE_LEVEL")
        
    
            self.p.add_option("--force-recompile", action="store_true", dest="recompile", default=False)
            
        
            # Now tell the parser about the default values of all the options
            # we just told it about
            self.p.set_defaults(
                debug_level     = 0,          
                verbose_level   = 0,
                )       
            
        def parse(self):
            self.options, self.args = self.p.parse_args()
            self.debug_level     = self.options.debug_level    
            self.verbose_level   = self.options.verbose_level  
            self.recompile       = self.options.recompile
            
            # Output option details if debugging level is high enough
            if self.debug_level >= 3 :
                print
                print "Options: ", self.options
                print "Args: ", self.args
    
        # Defining this method defines the string representation of the
        # object when given as an argument to str() or the "print" command
        #
        def __str__(self):
            param_print_str = \
    """Parameters:
      debug_level    : %d
      verbose_level  : %d
      force_recompile: %s
    """ 
    
            str_output = param_print_str % \
                (self.debug_level, 
                 self.verbose_level,
                 self.recompile)  
            
            return str_output
        
    def main():
        # Global level params class instance was
        # created before calling main(). We make it
        # global so that other code can access the set
        # of Parameters, simply by accessing the Params
        # instance. Here, however, we call the parse()
        # method to actually get the arguments, since
        # we have been called from the command line.
        Params.parse()
        debug_level = Params.debug_level
        if Params.debug_level >= 2:
            print Params

        try:
            # The first option that is not an optparse 
            # option should be the filename.
            filename = Params.args[FILENAME]
        except(IndexError):
            Params.p.print_usage()
            print 'Error: No input file specified.'
            raise SystemExit(ERRNO_NO_FILENAME)

        import ipymake.ipymcompiler as ipymc

        # Compile the input file 
        try:
            ipymc.ipym_compile(filename)
        except(SyntaxError, eargs):
            print "Error: There was a syntax error in the input file: "\
                , filename, \
                ". This is normally caused by incorrect spacing (4 spaces"\
                " for indentation) or forgetting to put `pass' at the end"\
                " of each target."
            print
            print eargs
            raise SystemExit(ERRNO_INFILE_SYNTAX)


    
    global Params
    Params = Params_Set()
    
    main()
