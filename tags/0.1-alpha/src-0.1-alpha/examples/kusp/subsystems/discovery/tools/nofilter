#!/usr/bin/env python
# Trace Me Tool
# authors: Michael Jantz

import sys
import os
import optparse
import tempfile
import subprocess as sp
import signal
from pykusp import taskalias
from datastreams import dski
from datastreams import dsui
from datastreams.postprocess import pipeline

class traceme():

	def __init__(self):
		self.buffer_count = 50
		self.buffer_size = 500000

		self.enabled_families = [
			'FIFO',
		      	'FORK',
			'EXIT',
			'ROOT_THREAD',
			'SIGNAL',
			'FLOCK',
			'SHMEM',
			'PIPE',
			'FILE',
			'PTRACE',
			'EXECVE',
			'SOCKET',
			'TCP_LAYER',
			'IP_LAYER',
			'UDP_LAYER',
			'INET',
			'NET_DEVICE_LAYER',
			'E100',
			#'SCHEDULE'
		]

		self.pid = None
		self.task_alias_group_name = None

	def init_dski(self):

		traceme_ds_context = None
		try:
			# Create the DS Python context for configuration and
			# logging of the event stream. Note that we tell it the
			# name of the logging output file, which it opens and
			# associates with this context
			#
			datadir = tempfile.mkdtemp(suffix="_dski",dir="data")
			traceme_ds_context = dski.dski_context(datadir)
		except IOError:
			print "Unable to open DSKI device. Is the module loaded???"
			sys.exit(1)

		# Allocate the desired number of buffers and the total buffer size
		# as configured and associate them with this DSKI context. Note
		# that these resources are associated with the name "chan1".
		#
		chan = traceme_ds_context.create_channel("chan1", self.buffer_size, self.buffer_count, 0)

		# This actually creates the data stream, named "ds1" which will
		# use the buffer resouces represented by "chan1". 
		#
		ds = traceme_ds_context.create_datastream("ds1", "chan1")

		# Enable DSKI for the families that were listed above 
		#
		for ename in self.enabled_families:
			ds.enable_family(ename)

		return traceme_ds_context

	def main(self):
	
		# Since the "traceme" tool is meant to trace an arbitrary command
		# line, we currently assume that all arguments on the command line are
		# for the traced command, rather than for "traceme". The standard use
		# of traceme is:
		#
		#   bash> traceme cmd <cmd-args>
		#
		# Here we have to use Optparse in an unusual way, because while it
		# will try to examine everything to the right of "traceme" for
		# correctness according to the specified argument constraints, we can
		# make no such specification because we want to be able to trace
		# arbitrary commands with arbitrary arguments. Thus, we create the
		# parser, and then call "parser.disable_interspersed_args()" to tell
		# it to not check correct ness constraints on the arguments, as is
		# required in all normal uses of command line argument parsing.
		#
		parser = optparse.OptionParser()
		parser.disable_interspersed_args()

		#
		# here we parse the command line arguments in lists. The list
		# traced_cmd_pieces contains the list of components comprising 
		# "cmd <cmd-args>"
		#
		(traceme_cmd,traced_cmd_pieces) = parser.parse_args()

		#
		# Here we use "traced_cmd" to reconstruct the components of the
		# command line we are being asked to trace. Note that in this loop is
		# where we can look fo any arguments to the "traceme" command, if we
		# need to create some, and separate them out from those of the traced
		# command.
		#
		traced_cmd =''
		for piece in traced_cmd_pieces:
			traced_cmd = traced_cmd + piece + ' ' 

		self.pid = os.getpid()
		self.task_alias_group_name = "traceme_" + `self.pid`
		
		# Start DSKI
		traceme_ds_context = self.init_dski()
		traceme_ds_context.start_logging()
	
		# Start DSUI
		dsui_output = tempfile.mkstemp(suffix="_traced.dsui.bin", dir="data")[1]
		dsui.start(dsui_output, 0)
		print "started logging"
		
		dsui.event("TRACEME", "TRACEME_TOOL", os.getpid())
		taskalias.add_alias(self.task_alias_group_name)
		os.system(traced_cmd)
		dsui.close()
		traceme_ds_context.close()
		
if __name__ == "__main__":
	tracer = traceme()
	tracer.main()
