#!/bin/env python
"""
:program:`ccsmsh` CCSM Shell
=============================================

.. moduleauthor:: Dillon Hicks <hhicks@ittc.ku.edu>

"""
import sys
import os
import optparse
from pyccsm.ccsmconsole import CCSMConsole 
            
########################################################
#
# If this module is called as a command, then open the
# file, parse it, and 

if __name__ == "__main__":
    # Define the set of permitted parameters, including the
    # command arguments.  The initialization method creates
    # the parser and defines the defaults. The parse()
    # method actually parses the arguments one the command
    # line. This was done so that the instance of the class
    # could be global and thus available to all
    # routines. and then parse the arguments to this call
    # according to the specification
    class Params_Set:
        USAGE = "usage: %prog [options]"

        def __init__(self):
            # Create the argument parser and then tell it
            # about the set of legal arguments for this
            # command. The parse() method of this class
            # calls parse_args of the optparse module
            self.p = optparse.OptionParser(usage=self.USAGE)

            # Boring and totally standard verbose and
            # debugging options that should be common to
            # virtually any command
            #
            self.p.add_option("-d", action="store_const", const=1,        
                              dest="debug_level", 
                              help="Turn on diagnostic output at level 1")
            self.p.add_option("-D", action="store", type ="int",    
                              dest="debug_level", 
                              help="Turn on diagnostic output at level DEBUG_LEVEL")
            self.p.add_option("-v", action="store_const", const=1,        
                              dest="verbose_level", 
                              help="Turn on narrative output at level 1")
            self.p.add_option("-V", action="store", type ="int",    
                              dest="verbose_level", 
                              help="Turn on narrative output at level VERBOSE_LEVEL")
            self.p.add_option("-c", action="store_const", const=True,    
                              dest="command_mode", 
                              help="Execute one COMMAND in the ccsm shell, then exit.")
            
            
        
            # Now tell the parser about the default values of all the options
            # we just told it about
            self.p.set_defaults(
                debug_level     = 0,          
                verbose_level   = 0,
                command_mode         = False,
                )       
            
        def parse(self):
            self.options, self.args = self.p.parse_args()
            self.debug_level     = self.options.debug_level    
            self.verbose_level   = self.options.verbose_level  
            self.command_mode    = self.options.command_mode
                     
            # Output option details if debugging level is high enough
            if self.debug_level >= 3 :
                print
                print "Options: ", self.options
                print "Args: ", self.args

        # Defining this method defines the string representation of the
        # object when given as an argument to str() or the "print" command
        def __str__(self):
            param_print_str = \
"""Parameters:
  debug_level    : %d
  verbose_level  : %d
  command_mode   : %s
""" 

            str_output = param_print_str % \
                (self.debug_level, 
                 self.verbose_level,
                 self.command_mode)
            
            return str_output
        

    def main():
        # Global level params class instance was
        # created before calling main(). We make it
        # global so that other code can access the set
        # of Parameters, simply by accessing the Params
        # instance. Here, however, we call the parse()
        # method to actually get the arguments, since
        # we have been called from the command line.
        Params.parse()
        debug_level = Params.debug_level
        if Params.debug_level >= 2:
            print Params

        # The gsched 'interperater'
        ccsm_console = CCSMConsole()

        if not Params.command_mode:
            # Not command mode means, either interactive mode or
            # scripting mode.
            if len(Params.args) == 0:
                # No extra arguments means just fire up the
                # interactive ccsmconsole
                ccsm_console.interact()
            else:
                # When called as a script when a file has the heading
                # #! /<path>/ccsmsh, the extra argument is the file
                # path of the file holding the script, get that argument.
                # (Also you can use ccsmsh <file> )
                filepath = Params.args[0]
                # Holds each line of the file if the file is readable.
                commands = []
                try:
                    # Open the file and attempt to read all of it.
                    inputfile = open(filepath, 'r')
                    commands = inputfile.readlines()
                    inputfile.close()
                except IOError, eargs:
                    # An IO error occured, let the user know what is
                    # happening. Probably a permissions problem, or
                    # the file doesnt exist.
                    print eargs
                
                if len(commands) > 0:
                    # The file wasn't empty, so attempt to process
                    # each line as a command.
                    for cmd in commands:
                        # Stripping the newline and leading white
                        # space is necessary for the parsing to work
                        # correctly.
                        cmd = cmd.strip()
                        if not cmd.startswith('#'):
                            # The hash sign indicates a comment, skip
                            # it.
                            ccsm_console.push(cmd)
                    ccsm_console.quit()
                else:
                    # The file was empty or unreadable, so just start
                    # the interactive program.
                    print "Starting interactive program..."
                    
        else:
            # Command mode, just take the extra command line arguments
            # and format them in a whay the ccsmconsole will
            # like. Then send the formatted line as a command to
            # execute to ccsmconsole.
            command = ' '.join(Params.args)
            ccsm_console.push(command)
            ccsm_console.quit()
            

    
    global Params
    Params = Params_Set()

    main()
